rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUserAuthenticated(userId) {
      return request.auth.uid == userId;
    }

    function userExists() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    function getAdminFlag() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.adminFlag == true;
    }

    function isAdmin() {
      return isAuthenticated() &&
      userExists() &&
      getAdminFlag();
    }

    function squeeze() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lendingStatus']);
    }

    match /users/{userId} {
      allow read: if isAuthenticated() && isUserAuthenticated(userId);
      allow write: if isAuthenticated();
      match /history/{bookId} {
        allow read, write: if isAuthenticated() && userExists();
      }
    }

    match /books/{bookId} {
      allow read: if isAuthenticated() && userExists();
      allow create: if isAdmin();
      allow update: if isAdmin() || ( isAuthenticated() && userExists() && squeeze() );
      allow delete: if isAdmin();
    }

    match /lending/{lendingId} {
      allow read, write: if isAuthenticated() && userExists();
    }

    match /storages/{storageId} {
      allow read, write: if isAdmin();
    }
  }
}